require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe OrganizationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Organization. As you add validations to Organization, be sure to
  # adjust the attributes here as well.
  let!(:organization){ FactoryGirl.create(:organization) }
  let!(:user){ FactoryGirl.create(:user) }
  let!(:membership){FactoryGirl.create(:membership)}


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OrganizationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #show" do
    it "assigns the requested organization as @organization" do
      get :show, id: organization
      expect(assigns(:organization)).to eq(organization)
    end
  end


  describe "POST #create" do

    describe "with valid params" do
      it "creates a new Organization" do
        organization_params = {"name"=>"Peduca"}
        expect{
        put :create, organization:organization_params
        }.to change(Organization, :count).by(1)
      end



      it "redirects to the created organization" do
        organization_params = {"name"=>"Peduca"}
        put :create, organization:organization_params
        expect(response).to redirect_to(Organization.last)

      end
    end

    context "with invalid params" do
      it "re-renders the 'new' template" do
        organization_params = {"name"=>"OK"}
        put :create, organization:organization_params
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    describe "with valid params" do

      it "updates the requested organization" do
          organization_params = {"name"=>"Ebe"}
          put :update, id:organization.id, organization:organization_params
          organization2 = Organization.find_by name:"Ebe"
          expect(organization2).not_to eq(nil)
      end

      it "redirects to the organization" do
        organization_params = {"name"=>"Ebe"}
        put :update, id:organization.id, organization:organization_params
        expect(response).to redirect_to(organization)
      end
    end

    describe "with invalid params" do
      it "re-renders the 'edit' template" do
        organization_params = {"name"=>"e"}
        put :update, id:organization.id, organization:organization_params
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested organization" do
      get :destroy, id: organization
      expect(Organization.count).to eq(0)
    end

    it "redirects to the organizations list" do
      get :destroy, id: organization
      expect(response).to redirect_to(organizations_url)
    end
  end

end

