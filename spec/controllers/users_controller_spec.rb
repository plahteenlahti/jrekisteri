require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

require 'rails_helper'

describe UsersController do
  render_views

  let!(:user){ FactoryGirl.create(:user) }

  describe "when logged in" do

    before(:each) {
      session[:user_id] = user.id
    }

    describe "GET #show" do
      it "assigns the requested user to @user" do
        get :show, id: user
        expect(assigns(:user)).to eq(user)
      end

      it "renders the #show view" do
        get :show, id: user
        expect(response).to render_template(:show)
      end
    end

    describe "GET #new" do
      before(:each) { get :new }

      it "assigns new user to @user" do
        expect(assigns(:user)).to be_a_new(User)
      end

      it "renders the #show view" do
        expect(response).to render_template(:new)
      end
    end

    describe "GET #destroy" do
      it "deletes user given in parametres" do
        get :destroy, id: user
        expect(User.count).to eq(0)
      end
    end

    describe "POST #update" do

      describe "with valid params" do
        it "updates user" do
          user_params = {"email"=>"koira@koira.fi", "password"=>"koira","password_confirmation"=>"koira"}
          put :update, id:user.id, user:user_params

          user2 = User.find_by email:"koira@koira.fi"
          expect(user2).not_to eq(nil)
        end
      end



      describe "with invalid params" do
        it "wont update user" do
          user_params = {"email"=>"ok"}
          put :update, id:user.id, user:user_params

          user2 = User.find_by email:"koira@koira.fi"
          expect(user2.email).not_to eq(nil)

          user2 = User.find_by email:"ok"
          expect(user2).to eq(nil)
        end
      end
    end


  end

  describe "when not logged in" do

    describe "POST #create" do

      describe "with valid params" do
        it "creates and saves user" do
          user_params = {"email"=>"kissa@koira.fi", "password"=>"koira", "password_confirmation"=>"koira"}
          expect{
            post :create, user:user_params
          }.to change(User,:count).by(1)
        end
      end

      describe "with invalid params" do
        it "redirects to users#new" do
          user_params = {"username"=>"koira@koira.fi", "password"=>"", "password_confirmation"=>""}
          post :create, user:user_params
          expect(response).to render_template(:new)
        end
      end

    end

  end

end